# -*- coding: utf-8 -*-
"""CNN test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aUHNhtemWoIm2a85xX7POwv5TwhbgTWC
"""

!pip install python-mnist

import numpy as np
import matplotlib.pyplot as plt
import random

from sklearn.metrics         import accuracy_score
from sklearn.model_selection import train_test_split

import keras
from keras.utils  import to_categorical
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout

from mnist import MNIST

from google.colab import drive
drive.mount('/content/drive')

path = "drive/My Drive/CNN/gzip/Balanced"

class CNN(object):
    def __init__(self, train_data = 'default', test_data = 'default', lr = .01, batch_size = 128):
        self.lr = lr
        self.batch_size = batch_size
        if train_data == 'default':
            mndata = MNIST(path)
            images, labels = mndata.load_training()
            labels = to_categorical(list(labels))
            self.trainX, self.testX, self.trainy, self.testy = train_test_split(images, labels, test_size = .2)
            self.trainX = np.array(self.trainX).reshape((len(self.trainX), 28, 28, 1))
            self.train_data = (self.trainX, self.trainy)
            self.test_data = (self.testX, self.testy)
            
        else:
            self.train_data = train_data
            self.trainX, self.testX, self.trainy, self.testy = train_test_split(train_data[0], train_data[1], test_size = .2)
        if test_data == 'default':
          pass
        else:
          self.test_data = test_data
            
    def build_model(self):
        model = Sequential()
        model.add(Conv2D(32, kernel_size = (3,3), input_shape = (28, 28, 1), activation = "relu"))
        model.add(MaxPooling2D((2,2))) 
        model.add(Dropout(.25))

        model.add(Conv2D(64, kernel_size = (3,3), activation = "relu"))
        model.add(MaxPooling2D((2,2)))
        model.add(Dropout(.25))

#        model.add(Conv2D(64, kernel_size = (5,5), activation = "relu"))
#        model.add(MaxPooling2D((2,2)))
#        model.add(Dropout(.25))

        model.add(Flatten())
        model.add(Dense(512, activation = "relu"))
        model.add(Dropout(.5))
        model.add(Dense(47, activation = "softmax"))
        model.summary()
        
        model.compile('adam', loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])

        self.model = model
        
    
    def train_model(self, epochs = 10, verbose = 1, validation = .2):
      return self.model.fit(self.trainX, np.array(self.trainy), batch_size = self.batch_size, epochs = epochs, verbose = verbose, validation_split = validation)

    def predict_img(self, img = "test"):
        if img == "test":
          img = self.testX
        predictions = np.zeros(len(img))
        new_data = np.array(img).reshape((len(img), 28, 28, 1))
        pred_prob = self.model.predict(new_data)
        for i in range(len(pred_prob)):
          predictions[i] = np.argmax(pred_prob[i])
        return predictions
    
    def visualize_data(self, n):
        """
        Visualizing the characters
    
        """
        data = self.trainX
        r = []
        viz = []
        for i in range(n):
            r.append(random.randint(0, len(data)))
        for j in range(len(r)):
            viz.append(np.array(data[r[j]]).reshape(28,28))
        for img in viz:
            new_image = np.asarray(img) / 255.0
            plt.imshow(new_image)
            plt.show()
        
    def visualize_accuracy(self, history):
        """
        Plots out the accuracy measures given a keras history object
        
        :param history: return value from model.fit()
        """
        if history is None: return
        
        plt.plot(history.history['accuracy'])
        plt.plot(history.history['val_accuracy'])
        plt.title("Accuracy")
        plt.xlabel('epoch')
        plt.ylabel('accuracy')
        plt.legend(['train','test'])
        plt.show()

model = CNN()
model.build_model()

history = model.train_model(epochs = 30)

model.visualize_accuracy(history)

labels = [np.argmax(i) for i in model.testy]
y_pred = model.predict_img()
accuracy = accuracy_score(labels, y_pred)
print(accuracy)